name: Deploy Apps to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: sites
    outputs:
      full_image_name: ${{ secrets.DOCKER_REPO }}:${{ steps.get_version.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Get current date and commit SHA for image tagging
        id: get_version
        run: |
          # Membersihkan nama branch untuk digunakan sebagai bagian dari tag image Docker
          RAW_BRANCH_NAME="${{ github.ref_name }}"
          CLEANED_BRANCH_NAME=$(echo "$RAW_BRANCH_NAME" | sed 's/\//-/g' | tr -cd '[:alnum:]._-' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]\+/-/g')

          if [ -z "$CLEANED_BRANCH_NAME" ]; then
            CLEANED_BRANCH_NAME="default-branch"
          fi

          # Membuat tanggal dan SHA commit singkat untuk tagging image yang unik
          DATE=$(date +%m%d%H%M)
          SHA=$(echo ${{ github.sha }} | cut -c1-7)

          # Membangun tag image akhir
          IMAGE_TAG="${CLEANED_BRANCH_NAME}-${DATE}-${SHA}"
          echo "Generated image tag: ${IMAGE_TAG}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "SHA=${SHA}" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME_CLEANED=${CLEANED_BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image to Docker Hub
        id: docker_build
        env:
          FULL_IMAGE_NAME: ${{ secrets.DOCKER_REPO }}:${{ steps.get_version.outputs.IMAGE_TAG }}
        run: |
          docker build -t ${{ env.FULL_IMAGE_NAME }} .
          docker push ${{ env.FULL_IMAGE_NAME }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: sites
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment on EC2..."
            IMAGE_TO_DEPLOY="${{ needs.build-and-push.outputs.full_image_name }}"
            CONTAINER_NAME="personal-platforms"

            echo "Stopping and removing old container: ${CONTAINER_NAME}"
            docker stop "${CONTAINER_NAME}" || true
            docker rm "${CONTAINER_NAME}" || true

            echo "Pulling new image: ${IMAGE_TO_DEPLOY}"
            docker pull "${IMAGE_TO_DEPLOY}"

            NODE_ENV_CLEAN=$(echo "development" | tr -d '\n\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            PORT_CLEAN=$(echo "${{ vars.PORT }}" | tr -d '\n\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            DATABASE_URL_CLEAN=$(echo "${{ secrets.DATABASE_URL }}" | tr -d '\n\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

            echo "Running new container: ${CONTAINER_NAME} on port ${PORT_CLEAN}"
            docker run -d \
              -p "${PORT_CLEAN}":5000 \
              --name "${CONTAINER_NAME}" \
              -e NODE_ENV="${NODE_ENV_CLEAN}" \
              -e PORT="${PORT_CLEAN}" \
              -e DATABASE_URL="${DATABASE_URL_CLEAN}" \
              --restart=always \
              "${IMAGE_TO_DEPLOY}"

            echo "Deployment successful for ${IMAGE_TO_DEPLOY}!"
            docker image prune -f # Membersihkan image lama yang tidak terpakai
            echo "Old images pruned."